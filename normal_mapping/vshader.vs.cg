struct vIn {
    float3 norm : NORMAL;
    float2 tex  : TEXCOORD;
    float3 pos  : POSITION;
};

struct vOut {
    float4 pos  : POSITION;
    float4 col0 : COLOR0;
    float2 tex0 : TEXCOORD0; // Our normal map
    float3 tex1 : TEXCOORD1; // Our light direction
};

vOut main(
    vIn              I,
    uniform float4x4 m_model,
    uniform float4x4 m_view,
    uniform float4x4 m_proj,
    uniform float4   camera_pos,
    uniform float4   light_pos
    )
{
    vOut   result;
    
    // Transform position and normal
    float4 pos = mul(float4(I.pos, 1.0), m_model);
    float3 norm = normalize(mul(float4(I.norm, 0.0f), m_model).xyz);
    
    // Calculate diffuse light direction and intensity
    float3 light_dir = normalize(light_pos.xyz - pos.xyz);
    float light_diffuse = max(dot(norm, light_dir), 0);
    
    // Calculate specular light intensity
    float3 view_dir = normalize(camera_pos.xyz - pos.xyz);
    float3 reflect_dir = reflect(-light_dir, norm);
    float light_specular = pow(max(dot(view_dir, reflect_dir), 0.0), 1);
    
    // Calculate total light intensity
    float light_intensity = light_diffuse + light_specular;
    light_intensity = saturate(light_intensity);
    
    // Transform pos to screen space
    pos = mul(pos, m_view);
    pos = mul(pos, m_proj);
    pos.xyz = pos.xyz / pos.w;
    
    result.pos  = pos;
    result.col0 = light_intensity;
    result.tex0 = I.tex;
    result.tex1 = light_dir;
    
    return result;
}
