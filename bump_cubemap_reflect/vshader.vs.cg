struct vIn {
    float3 tang : TEXCOORD1;
    float3 norm : NORMAL;
    float2 tex  : TEXCOORD0;
    float3 pos  : POSITION;
};

struct vOut {
    float4 pos  : POSITION;
    float2 tex0 : TEXCOORD0;
    float4 tex1 : TEXCOORD1;
    float4 tex2 : TEXCOORD2;
    float4 tex3 : TEXCOORD3;
};

vOut main(
    vIn              I,
    uniform float4x4 m_model,
    uniform float4x4 m_view,
    uniform float4x4 m_proj,
    uniform float4   camera_pos
    )
{
    vOut   result;
    
    // Transform position
    float4 pos = mul(float4(I.pos.xyz, 1.0), m_model);
    
    // Inverse and transpose the modelview matrix, and keep the upper 3x3
    float3x3 t_inv_modelview = (float3x3)transpose(inverse(m_model));
    
    // Construct TBN Matrix using tangent, bitangent and normal
    float3 T = normalize(mul(t_inv_modelview, I.tang));
    float3 N = normalize(mul(t_inv_modelview, I.norm));
    float3 B = cross(N, T);
    
    // Ensure orthonormalization
    T = cross(B, N);
    
    float3x3 TBN = float3x3(T, B, N);
    
    // Construct final lookup matrix
    float3x3 TexelMat = mul(t_inv_modelview, TBN);
    
    // Calculate eye vector
    float3 eyeDir = pos.xyz - camera_pos.xyz;
    
    // Transform pos to screen space
    pos = mul(pos, m_view);
    pos = mul(pos, m_proj);
    pos.xyz = pos.xyz / pos.w;
    
    result.pos  = pos;
    result.tex0 = I.tex;
    
    result.tex1 = float4(TexelMat._11_12_13, eyeDir.x);
    result.tex2 = float4(TexelMat._21_22_23, eyeDir.y);
    result.tex3 = float4(TexelMat._31_32_33, eyeDir.z);
    
    return result;
}
